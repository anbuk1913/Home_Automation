<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= room.name %> - Home Automation</title>
    <link rel="icon" href="/images/logo.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-green: #8cbf3a;
            --secondary-gray: #374151;
            --bg-dark: #1a1a1a;
            --bg-card: #262626;
            --bg-darker: #0f0f0f;
            --light-green: #a5d155;
            --dark-green: #75a832;
            --light-gray: #9ca3af;
            --dark-gray: #1f2937;
            --border-dark: #404040;
            --text-light: #e5e7eb;
            --text-gray: #9ca3af;
            --text-dark: #374151;
            --shadow-green: rgba(140, 191, 58, 0.15);
            --shadow-medium: rgba(140, 191, 58, 0.25);
            --shadow-heavy: rgba(0, 0, 0, 0.3);
            --hover-bg: #333333;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            user-select: none;
            font-family: 'Quicksand', sans-serif;
            background: var(--bg-dark);
            color: var(--text-light);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, var(--bg-card) 0%, var(--bg-darker) 100%);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid var(--border-dark);
            box-shadow: 0 8px 32px var(--shadow-heavy);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, var(--primary-green), var(--light-green));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-info {
            display: flex;
            gap: 30px;
            flex-wrap: wrap;
            align-items: center;
            margin-top: 20px;
        }

        .status-card {
            background: var(--bg-darker);
            padding: 20px;
            border-radius: 12px;
            border: 1px solid var(--border-dark);
            min-width: 150px;
            text-align: center;
            box-shadow: 0 4px 16px var(--shadow-heavy);
        }

        .status-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary-green);
            margin-bottom: 5px;
        }

        .status-label {
            color: var(--text-gray);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Pins Grid */
        .pins-section {
            margin-top: 30px;
        }

        .section-title {
            font-size: 1.8rem;
            margin-bottom: 25px;
            color: var(--text-light);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title::before {
            content: '';
            width: 4px;
            height: 30px;
            background: linear-gradient(135deg, var(--primary-green), var(--light-green));
            border-radius: 2px;
        }

        .pins-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .pin-card {
            background: var(--bg-card);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid var(--border-dark);
            box-shadow: 0 6px 24px var(--shadow-heavy);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .pin-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-green), var(--light-green));
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .pin-card:hover::before {
            transform: scaleX(1);
        }

        .pin-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px var(--shadow-medium);
        }

        .pin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .pin-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--text-light);
        }

        .pin-status {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .pin-status.active {
            background: rgba(140, 191, 58, 0.2);
            color: var(--light-green);
            border: 1px solid var(--primary-green);
        }

        .pin-status.inactive {
            background: rgba(156, 163, 175, 0.2);
            color: var(--light-gray);
            border: 1px solid var(--light-gray);
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-indicator.active {
            background: var(--primary-green);
        }

        .status-indicator.inactive {
            background: var(--light-gray);
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .pin-button {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
        }

        .pin-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .pin-button:hover::before {
            left: 100%;
        }

        .pin-button.on {
            background: linear-gradient(135deg, var(--primary-green), var(--light-green));
            color: white;
            box-shadow: 0 6px 20px var(--shadow-green);
        }

        .pin-button.on:hover {
            background: linear-gradient(135deg, var(--light-green), var(--primary-green));
            transform: translateY(-2px);
            box-shadow: 0 8px 25px var(--shadow-medium);
        }

        .pin-button.off {
            background: var(--secondary-gray);
            color: var(--text-gray);
            border: 2px solid var(--border-dark);
        }

        .pin-button.off:hover {
            background: var(--hover-bg);
            color: var(--text-light);
            border-color: var(--light-gray);
        }

        .pin-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .edit-pin-button {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--bg-darker);
            border: 1px solid var(--border-dark);
            color: var(--text-gray);
            padding: 8px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .pin-card:hover .edit-pin-button {
            opacity: 1;
        }

        .edit-pin-button:hover {
            background: var(--hover-bg);
            color: var(--primary-green);
            border-color: var(--primary-green);
        }

        .loading {
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            margin: auto;
            border: 2px solid transparent;
            border-top-color: #ffffff;
            border-radius: 50%;
            animation: spin 1s ease infinite;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: var(--bg-card);
            border-radius: 15px;
            border: 2px dashed var(--border-dark);
        }

        .empty-state-icon {
            font-size: 4rem;
            color: var(--text-gray);
            margin-bottom: 20px;
        }

        .empty-state h3 {
            color: var(--text-light);
            margin-bottom: 10px;
        }

        .empty-state p {
            color: var(--text-gray);
        }

        /* Navigation Buttons */
        .nav-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .back-button, .edit-button {
            display: inline-flex;
            align-items: center;
            gap: 10px;
            background: var(--bg-card);
            color: var(--text-light);
            text-decoration: none;
            padding: 12px 20px;
            border-radius: 12px;
            border: 1px solid var(--border-dark);
            transition: all 0.3s ease;
            cursor: pointer;
            font-size: 1rem;
        }

        .back-button:hover {
            background: var(--hover-bg);
            border-color: var(--primary-green);
            color: var(--primary-green);
        }

        .edit-button {
            background: linear-gradient(135deg, var(--primary-green), var(--light-green));
            border-color: var(--primary-green);
        }

        .edit-button:hover {
            background: linear-gradient(135deg, var(--light-green), var(--primary-green));
            transform: translateY(-2px);
            box-shadow: 0 6px 20px var(--shadow-medium);
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(135deg, var(--primary-green), var(--light-green));
        }

        .toast.error {
            background: linear-gradient(135deg, #dc2626, #ef4444);
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            z-index: 1001;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .modal-overlay.show {
            display: flex;
        }

        .modal {
            background: var(--bg-card);
            border-radius: 15px;
            border: 1px solid var(--border-dark);
            box-shadow: 0 20px 60px var(--shadow-heavy);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .modal-overlay.show .modal {
            transform: scale(1);
        }

        .modal-header {
            padding: 25px 30px 20px;
            border-bottom: 1px solid var(--border-dark);
            display: flex;
            justify-content: between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5rem;
            color: var(--text-light);
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--text-gray);
            cursor: pointer;
            padding: 5px;
            border-radius: 5px;
            transition: all 0.3s ease;
            margin-left: auto;
        }

        .modal-close:hover {
            background: var(--hover-bg);
            color: var(--text-light);
        }

        .modal-body {
            padding: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-light);
            font-weight: 500;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            background: var(--bg-darker);
            border: 1px solid var(--border-dark);
            border-radius: 8px;
            color: var(--text-light);
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-green);
            box-shadow: 0 0 0 3px var(--shadow-green);
        }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            padding-top: 20px;
        }

        .btn-cancel {
            padding: 12px 25px;
            background: var(--secondary-gray);
            color: var(--text-light);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-cancel:hover {
            background: var(--hover-bg);
        }

        .btn-save {
            padding: 12px 25px;
            background: linear-gradient(135deg, var(--primary-green), var(--light-green));
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-save:hover {
            background: linear-gradient(135deg, var(--light-green), var(--primary-green));
            transform: translateY(-1px);
        }

        .btn-save:disabled, .btn-cancel:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .pin-edit-item {
            background: var(--bg-darker);
            border: 1px solid var(--border-dark);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .pin-edit-item:last-child {
            margin-bottom: 0;
        }

        .pin-edit-label {
            color: var(--text-gray);
            font-size: 0.9rem;
            min-width: 60px;
        }

        .pin-edit-input {
            flex: 1;
            padding: 10px 12px;
            background: var(--bg-card);
            border: 1px solid var(--border-dark);
            border-radius: 6px;
            color: var(--text-light);
            font-size: 0.95rem;
            transition: border-color 0.3s ease;
        }

        .pin-edit-input:focus {
            outline: none;
            border-color: var(--primary-green);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .nav-buttons {
                flex-direction: column;
                gap: 10px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .header-info {
                gap: 15px;
            }

            .pins-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .pin-card {
                padding: 20px;
            }

            .status-card {
                min-width: 120px;
                padding: 15px;
            }

            .modal {
                width: 95%;
            }

            .modal-body {
                padding: 20px;
            }

            .modal-actions {
                flex-direction: column;
            }

            .pin-edit-item {
                flex-direction: column;
                align-items: stretch;
                gap: 10px;
            }

            .pin-edit-label {
                min-width: auto;
            }
        }

        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.5rem;
            }

            .section-title {
                font-size: 1.5rem;
            }

            .header-info {
                flex-direction: column;
                align-items: stretch;
            }

            .status-card {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Navigation Buttons -->
        <div class="nav-buttons">
            <a href="/devices" class="back-button">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
                Back to Room List
            </a>
            
            <button class="edit-button" onclick="openEditModal()">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
                Edit Room
            </button>
        </div>

        <!-- Header Section -->
        <div class="header">
            <h1><%= room.name %></h1>
            <p style="color: var(--text-gray); margin-bottom: 20px;">
                Welcome back, <%= user.name %>! Control your smart devices from here.
            </p>
            
            <div class="header-info">
                <div class="status-card">
                    <div class="status-number" id="activePinsCount">0</div>
                    <div class="status-label">Active Pins</div>
                </div>
                <div class="status-card">
                    <div class="status-number"><%= room.pins.length %></div>
                    <div class="status-label">Total Pins</div>
                </div>
                <div class="status-card">
                    <div class="status-number" id="lastUpdated">--</div>
                    <div class="status-label">Last Updated</div>
                </div>
            </div>
        </div>

        <!-- Pins Section -->
        <div class="pins-section">
            <h2 class="section-title">
                Device Controls
            </h2>

            <% if (room.pins && room.pins.length > 0) { %>
                <div class="pins-grid">
                    <% room.pins.forEach((pin, index) => { %>
                        <div class="pin-card">
                            <div class="pin-header">
                                <h3 class="pin-name"><%= pin.name %></h3>
                                <div class="pin-status <%= pin.state ? 'active' : 'inactive' %>" id="status-<%= pin._id %>">
                                    <div class="status-indicator <%= pin.state ? 'active' : 'inactive' %>"></div>
                                    <span><%= pin.state ? 'ON' : 'OFF' %></span>
                                </div>
                            </div>
                            
                            <button 
                                class="pin-button <%= pin.state ? 'on' : 'off' %>" 
                                id="btn-<%= pin._id %>"
                                onclick="togglePin('<%= pin._id %>', '<%= pin.state %>')"
                                data-pin-id="<%= pin._id %>"
                                data-current-state="<%= pin.state %>"
                            >
                                <span class="button-text">Turn <%= pin.state ? 'OFF' : 'ON' %></span>
                            </button>
                            
                            <button 
                                class="edit-pin-button"
                                onclick="openPinEditModal('<%= pin._id %>', '<%= pin.name %>')"
                                title="Edit Pin Name"
                            >
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                </svg>
                            </button>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <div class="empty-state">
                    <div class="empty-state-icon">🏠</div>
                    <h3>No Devices Found</h3>
                    <p>Add some smart devices to start controlling your home automation.</p>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container"></div>

    <!-- Edit Room Modal -->
    <div class="modal-overlay" id="editModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Edit Room & Pins</h3>
                <button class="modal-close" onclick="closeEditModal()">
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <!-- Room Name -->
                    <div class="form-group">
                        <label class="form-label" for="roomNameInput">Room Name</label>
                        <input 
                            type="text" 
                            id="roomNameInput" 
                            class="form-input"
                            value="<%= room.name %>"
                            placeholder="Enter room name"
                            required
                        >
                    </div>

                    <!-- Pins List -->
                    <div class="form-group">
                        <label class="form-label">Pin Names</label>
                        <div id="pinsEditList">
                            <% if (room.pins && room.pins.length > 0) { %>
                                <% room.pins.forEach((pin) => { %>
                                    <div class="pin-edit-item">
                                        <span class="pin-edit-label">Pin:</span>
                                        <input 
                                            type="text" 
                                            class="pin-edit-input"
                                            data-pin-id="<%= pin._id %>"
                                            value="<%= pin.name %>"
                                            placeholder="Pin name"
                                        >
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div style="color: var(--text-gray); text-align: center; padding: 20px;">
                                    No pins available to edit
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-cancel" onclick="closeEditModal()">Cancel</button>
                        <button type="submit" class="btn-save" id="saveBtn">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Pin Edit Modal (for individual pin editing) -->
    <div class="modal-overlay" id="pinEditModal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Edit Pin</h3>
                <button class="modal-close" onclick="closePinEditModal()">
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <form id="pinEditForm">
                    <div class="form-group">
                        <label class="form-label" for="pinNameInput">Pin Name</label>
                        <input 
                            type="text" 
                            id="pinNameInput" 
                            class="form-input"
                            placeholder="Enter pin name"
                            required
                        >
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-cancel" onclick="closePinEditModal()">Cancel</button>
                        <button type="submit" class="btn-save" id="pinSaveBtn">Save Pin</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let activePinsCount = 0;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            updateActivePinsCount();
            updateLastUpdated();
        });

        // Update active pins counter
        function updateActivePinsCount() {
            const activePins = document.querySelectorAll('.pin-status.active').length;
            activePinsCount = activePins;
            document.getElementById('activePinsCount').textContent = activePinsCount;
        }

        // Update last updated time
        function updateLastUpdated() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit',
                hour12: true 
            });
            document.getElementById('lastUpdated').textContent = timeString;
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            
            const container = document.getElementById('toast-container');
            container.appendChild(toast);
            
            // Show toast
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Hide and remove toast
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => container.removeChild(toast), 300);
            }, 3000);
        }

        // Toggle pin state
        async function togglePin(pinId, currentState) {
            const button = document.getElementById(`btn-${pinId}`);
            const status = document.getElementById(`status-${pinId}`);
            const statusIndicator = status.querySelector('.status-indicator');
            const buttonText = button.querySelector('.button-text');
            
            // Add loading state
            button.disabled = true;
            button.classList.add('loading');
            buttonText.style.opacity = '0';
            
            try {
                const response = await fetch(`/pins/${pinId}/toggle`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        currentState: currentState
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    const newState = result.state;
                    
                    // Update button appearance
                    if (newState) {
                        button.className = 'pin-button on';
                        buttonText.textContent = 'Turn OFF';
                        status.className = 'pin-status active';
                        statusIndicator.className = 'status-indicator active';
                        status.querySelector('span').textContent = 'ON';
                    } else {
                        button.className = 'pin-button off';
                        buttonText.textContent = 'Turn ON';
                        status.className = 'pin-status inactive';
                        statusIndicator.className = 'status-indicator inactive';
                        status.querySelector('span').textContent = 'OFF';
                    }
                    
                    // Update data attribute
                    button.setAttribute('data-current-state', newState);
                    
                    // Update counters
                    updateActivePinsCount();
                    updateLastUpdated();
                    
                    // Show success message
                    showToast(`${result.pinName} turned ${newState ? 'ON' : 'OFF'}`, 'success');
                    
                } else {
                    throw new Error(result.message || 'Failed to toggle pin');
                }
                
            } catch (error) {
                console.error('Error toggling pin:', error);
                showToast(`Error: ${error.message}`, 'error');
            } finally {
                // Remove loading state
                button.disabled = false;
                button.classList.remove('loading');
                buttonText.style.opacity = '1';
            }
        }

        // Update button onclick handlers to pass correct current state
        document.addEventListener('DOMContentLoaded', function() {
            const buttons = document.querySelectorAll('.pin-button');
            buttons.forEach(button => {
                const pinId = button.getAttribute('data-pin-id');
                const currentState = button.getAttribute('data-current-state') === 'true';
                
                button.onclick = function() {
                    const latestState = this.getAttribute('data-current-state') === 'true';
                    togglePin(pinId, latestState);
                };
            });
        });

        // Auto-refresh functionality (optional)
        function autoRefresh() {
            // Refresh page every 5 minutes to sync with server state
            setTimeout(() => {
                location.reload();
            }, 300000); // 5 minutes
        }

        // Uncomment the line below if you want auto-refresh
        autoRefresh();

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
                
            // Press numbers 1-9 to toggle pins
            // const num = parseInt(e.key);
            // if (num >= 1 && num <= 9) {
            //     const buttons = document.querySelectorAll('.pin-button');
            //     if (buttons[num - 1]) {
            //         buttons[num - 1].click();
            //     }
            // }
        });

        // Add visual feedback for interactions
        document.querySelectorAll('.pin-card').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.borderColor = 'var(--primary-green)';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.borderColor = 'var(--border-dark)';
            });
        });

        // Handle connection status
        window.addEventListener('online', function() {
            showToast('Connection restored', 'success');
        });

        window.addEventListener('offline', function() {
            showToast('Connection lost', 'error');
        });

        // Edit Modal Functions
        let currentPinId = null;

        function openEditModal() {
            document.body.style.overflow = 'hidden';
            document.getElementById('editModal').classList.add('show');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.remove('show');
            document.body.style.overflow = 'auto';
        }

        function openPinEditModal(pinId, pinName) {
            currentPinId = pinId;
            document.getElementById('pinNameInput').value = pinName;
            document.getElementById('pinEditModal').classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closePinEditModal() {
            currentPinId = null;
            document.getElementById('pinEditModal').classList.remove('show');
            document.body.style.overflow = 'auto';
        }

        // Handle room and pins edit form submission
        document.getElementById('editForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const saveBtn = document.getElementById('saveBtn');
            const roomName = document.getElementById('roomNameInput').value.trim();
            
            if (!roomName) {
                showToast('Room name is required', 'error');
                return;
            }

            // Collect pin updates
            const pinUpdates = [];
            const pinInputs = document.querySelectorAll('.pin-edit-input');
            pinInputs.forEach(input => {
                const pinId = input.getAttribute('data-pin-id');
                const pinName = input.value.trim();
                if (pinName) {
                    pinUpdates.push({ pinId, name: pinName });
                }
            });

            // Disable save button
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch(`/rooms/<%= room._id %>/edit`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        roomName: roomName,
                        pins: pinUpdates
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast('Room updated successfully!', 'success');
                    closeEditModal();
                    // Reload page to show changes
                    setTimeout(() => location.reload(), 1000);
                } else {
                    throw new Error(result.message || 'Failed to update room');
                }

            } catch (error) {
                console.error('Error updating room:', error);
                showToast(`Error: ${error.message}`, 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save Changes';
            }
        });

        // Handle individual pin edit
        document.getElementById('pinEditForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!currentPinId) return;

            const saveBtn = document.getElementById('pinSaveBtn');
            const pinName = document.getElementById('pinNameInput').value.trim();
            
            if (!pinName) {
                showToast('Pin name is required', 'error');
                return;
            }

            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch(`/pins/${currentPinId}/edit`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: pinName
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    showToast('Pin updated successfully!', 'success');
                    closePinEditModal();
                    
                    // Update pin name in DOM
                    const pinCard = document.querySelector(`[data-pin-id="${currentPinId}"]`).closest('.pin-card');
                    const pinNameElement = pinCard.querySelector('.pin-name');
                    pinNameElement.textContent = pinName;
                    
                } else {
                    throw new Error(result.message || 'Failed to update pin');
                }

            } catch (error) {
                console.error('Error updating pin:', error);
                showToast(`Error: ${error.message}`, 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save Pin';
            }
        });

        // Close modal when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal-overlay')) {
                if (e.target.id === 'editModal') {
                    closeEditModal();
                } else if (e.target.id === 'pinEditModal') {
                    closePinEditModal();
                }
            }
        });

        // Close modal on Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditModal();
                closePinEditModal();
            }
        });
    </script>
</body>
</html>